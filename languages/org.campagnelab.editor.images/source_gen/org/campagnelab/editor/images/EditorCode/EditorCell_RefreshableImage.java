package org.campagnelab.editor.images.EditorCode;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cells.EditorCell_Basic;
import java.awt.Image;
import jetbrains.mps.nodeEditor.cells.EditorCell_Image;
import java.awt.image.ImageObserver;
import javax.swing.SwingUtilities;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import java.awt.Graphics;
import jetbrains.mps.nodeEditor.cells.ParentSettings;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.util.MacrosFactory;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.Solution;
import jetbrains.mps.vfs.FileSystem;
import java.awt.Toolkit;

public class EditorCell_RefreshableImage extends EditorCell_Basic {

  private String sourceFileName;
  private Image sourceImage;


  private EditorCell_Image.ImageAlignment myAlignment = EditorCell_Image.ImageAlignment.justify;
  private Image myImage;
  private int myDescent = -1;

  private ImageObserver mySizeObserver = new ImageObserver() {
    @Override
    public boolean imageUpdate(Image img, int infoflags, int x, int y, int width, int height) {
      int mask = ImageObserver.HEIGHT | ImageObserver.WIDTH;
      boolean done = (infoflags & mask) == mask;
      if (done) {
        SwingUtilities.invokeLater(new Runnable() {
          @Override
          public void run() {
            ModelAccess.instance().runReadAction(new Runnable() {
              public void run() {
                getEditor().rebuildEditorContent();
              }
            });
          }
        });

      }
      return done;
    }
  };


  protected EditorCell_RefreshableImage(EditorContext editorContext, SNode node) {
    super(editorContext, node);
    getStyle().set(StyleAttributes.PUNCTUATION_LEFT, true);
    getStyle().set(StyleAttributes.PUNCTUATION_RIGHT, true);
  }

  public static EditorCell_RefreshableImage createImageCell(EditorContext editorContext, SNode node, String imageFileName) {
    EditorCell_RefreshableImage result = new EditorCell_RefreshableImage(editorContext, node);
    result.sourceFileName = expandIconPath(imageFileName, node);
    result.setImageFileName(result.sourceFileName);
    return result;
  }

  public static EditorCell_RefreshableImage createImageCell(EditorContext editorContext, SNode node, Image image) {
    EditorCell_RefreshableImage result = new EditorCell_RefreshableImage(editorContext, node);
    result.sourceImage = image;
    result.setImage(image);
    return result;
  }

  @Override
  public void paintContent(Graphics g, ParentSettings parentSettings) {
    this.setImage(null);
    // reload the image 
    if (sourceImage != null) {
      this.setImage(sourceImage);
    } else {
      this.setImageFileName(this.sourceFileName);
    }
    // paint the content 
    this.repaintContent(g, parentSettings);
  }

  private void repaintContent(Graphics g, ParentSettings parentSettings) {
    if (myImage == null) {
      return;
    }
    switch (myAlignment) {
      case justify:
        g.drawImage(myImage, myX, myY, myWidth, myHeight, getEditor());
        break;
      case center:
        {
          int x = myX + (myWidth - myImage.getWidth(getEditor())) / 2;
          int y = myY + (myHeight - myImage.getHeight(getEditor())) / 2;
          g.drawImage(myImage, x, y, getEditor());
          break;
        }
      case title:
        break;
      default:
    }
  }


  private static String expandIconPath(String path, SNode sourceNode) {
    AbstractModule module = findAnchorModule(sourceNode.getModel());
    return (module != null ? MacrosFactory.forModule(module).expandPath(path) : null);
  }
  private static AbstractModule findAnchorModule(SModel model) {
    SModule module = model.getModule();
    if (module instanceof Language || module instanceof Solution) {
      return (AbstractModule) module;
    } else {
      return null;
    }
  }


  @Override
  protected void relayoutImpl() {
    if (myImage == null) {
      return;
    }
    if (myAlignment == EditorCell_Image.ImageAlignment.justify) {
      int width = myImage.getWidth(mySizeObserver);
      if (width != -1) {
        myWidth = width;
      }
      int height = myImage.getHeight(mySizeObserver);
      if (height != -1) {
        myHeight = height;
      }
    }
  }
  @Override
  public int getAscent() {
    return myHeight - getDescent();
  }
  @Override
  public int getDescent() {
    return (myDescent >= 0 ? myDescent : 0);
  }
  public void setDescent(int descent) {
    myDescent = descent;
  }
  public void setAlignment(EditorCell_Image.ImageAlignment alignment) {
    myAlignment = alignment;
  }
  protected void setImageFileName(String fileName) {
    if (fileName != null && FileSystem.getInstance().getFileByPath(fileName).exists()) {
      myImage = Toolkit.getDefaultToolkit().getImage(fileName);
    }
  }


  protected void setImage(Image image) {
    myImage = image;
  }


}

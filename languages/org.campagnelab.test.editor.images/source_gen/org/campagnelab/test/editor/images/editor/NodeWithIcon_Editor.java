package org.campagnelab.test.editor.images.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import javax.swing.Icon;
import jetbrains.mps.smodel.Language;
import com.bulenkov.iconloader.IconLoader;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.project.AbstractModule;
import java.awt.Image;
import javax.imageio.ImageIO;
import java.io.File;
import javax.swing.ImageIcon;
import org.apache.log4j.Level;
import org.campagnelab.icons.swing.IconAdapter;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class NodeWithIcon_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_qd9i0l_a(editorContext, node);
  }
  private EditorCell createCollection_qd9i0l_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_qd9i0l_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_qd9i0l_a0(editorContext, node));
    editorCell.addEditorCell(this.createJComponent_qd9i0l_b0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_qd9i0l_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Icon: ");
    editorCell.setCellId("Constant_qd9i0l_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createJComponent_qd9i0l_b0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, NodeWithIcon_Editor._QueryFunction_JComponent_qd9i0l_a1a(node, editorContext), "_qd9i0l_b0");
    editorCell.setCellId("JComponent_qd9i0l_b0");
    return editorCell;
  }
  private static JComponent _QueryFunction_JComponent_qd9i0l_a1a(final SNode node, final EditorContext editorContext) {
    String iconPathClean = "${module}/icons/ProcessIcon-5.png";
    Icon icon = null;
    Language language = (Language) node.getConcept().getLanguage().getSourceModule();
    try {
      if (true && language.isReadOnly()) {
        // running with language in a plugin, remove the ref to module 
        if (iconPathClean.startsWith("${module}")) {
          iconPathClean = iconPathClean.substring("${module}".length());
        }
        icon = IconLoader.getIcon(iconPathClean);
      } else {
        // running in the development environment. 
        iconPathClean = MacrosFactory.forModule(((AbstractModule) language)).expandPath(iconPathClean);
        Image image = null;
        image = ImageIO.read(new File(iconPathClean));
        icon = new ImageIcon(image);
      }

    } catch (Exception e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Exception raised while trying to construct icon with path=" + iconPathClean, e);
      }
    }
    return new IconAdapter(icon);
  }
  protected static Logger LOG = LogManager.getLogger(NodeWithIcon_Editor.class);
}
